from os import path as p
from os import makedirs

class footer_generator():
    
    def __init__(self, app, project_name):
        self.txt=[]
        self.fields=[]
        
        self.doc = []
        #self.app_name = app_name
        #self.tables = app['tables']
        self.app = app
        
        self.__set_doc()
    
    def __set_doc(self):

        a=[
            '{% block footer %}\n',
            '<footer class="page-footer font-small bg-dark text-light">\n',            
            '\t<div class="footer-copyright text-center py-3">&copy; 2020 Generated By \n',
            '\t\t<a href="https://sitecauldron.com/" target="_blank"> SiteCauldron.com</a>\n',
            '\t</div>\n',
            "</footer>\n",
            "{% endblock footer %}\n",
        ]
        
        self.doc = a
    
    def set_file(self,path):
        """
        if not p.exists(path):
            template_file = open(path,"x")
            #self.__set_default_dependencies()
            
        else:
            template_file = open(path,"a")
            pass
        """
        return open(path,"x")
    
    def create(self, path="./result"):
        
        if not p.exists(path) :
            makedirs(path,0o777)
        
        path= path+"/footer.html"
            
        model_file = self.set_file(path)
        
        model_file.writelines(self.doc)
        pass
    pass

class Footer_Generator(object):
    def __init__(self,app, project_name,out_path):
        
        print("Cooking footer template ...")
        try:
            model_ = footer_generator(app, project_name)
            model_.create(path= out_path+project_name+"/Templates/layouts")
            
        except Exception as e:
            print(e)
        
    pass


if __name__ == "__main__":
    
    app= {
        "name": "EjemploAlv",
        "description": ":v",
        "databaseType": "Sqlite",
        "tables": [
                    {
                        "name": "Persona",
                        "fields": [
                            {
                                "name": "Nombre",
                                "type": "String",
                                "required": "True",
                                "unique":"True" #comentar a samy de agregar este campo
                            },
                            {
                                "name": "Edad",
                                "type": "Integer",
                                "required": "True",
                                "unique":"False" #comentar a samy de agregar este campo
                                
                            }
                        ]
                    },
                    {
                        "name": "Mascota",
                        "fields": [
                            {
                                "name": "Nombre",
                                "type": "String",
                                "required": "True"
                            },
                            {
                                "name": "Propietario",
                                "type": "Persona",
                                "required": "False"
                            }
                        ]
                    }
                ]
            }
    
    s=Footer_Generator(app,"project_test")