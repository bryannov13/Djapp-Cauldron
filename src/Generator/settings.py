from os import path as p
from os import makedirs

class settings_generator():
    
    def __init__(self,app,project_name):
        
        self.app = app
        self.project_name = project_name
        
        self.doc = []
        
        self.__set_doc()
    
    def __set_doc(self):

        a=[
            "'''\n",
            "Django settings for "+self.project_name+" project.\n",
            "\n",
            "Generated by 'http://sitecauldron.com' using Django 3.0.2.\n",
            "\n",
            "'''\n",
            "\n",
            "\n",
            "import os\n",
            "\n",
            "# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n",
            "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
            "\n",
            "\n",
            "# Quick-start development settings - unsuitable for production\n",
            "# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n",
            "# SECURITY WARNING: keep the secret key used in production secret!\n",
            "SECRET_KEY = '7$otd(8suc5=0xhl3v78k7b78=+a9!jz5^5**_sekssjy$bo!$'\n",
            "\n",
            "# SECURITY WARNING: don't run with debug turned on in production!\n",
            "DEBUG = True\n",
            "\n",
            "\n",
            "ALLOWED_HOSTS = []\n",
            "\n",
            "\n",
            "# Application definition\n",
            "\n",
            "INSTALLED_APPS = [\n",
            "\t'django.contrib.admin',\n",
            "\t'django.contrib.auth',\n",
            "\t'django.contrib.contenttypes',\n",
            "\t'django.contrib.sessions',\n",
            "\t'django.contrib.messages',\n",
            "\t'django.contrib.staticfiles',\n",
            "\t'crispy_forms',\n",
            "\t'"+self.app['name']+"',\n",
            "]\n",
            "\n",
            "\n",
            "CRISPY_TEMPLATE_PACK = 'bootstrap4'\n",
            "\n",
            "\n",
            "MIDDLEWARE = [\n",
            "\t'django.middleware.security.SecurityMiddleware',\n",
            "\t'django.contrib.sessions.middleware.SessionMiddleware',\n",
            "\t'django.middleware.common.CommonMiddleware',\n",
            "\t'django.middleware.csrf.CsrfViewMiddleware',\n",
            "\t'django.contrib.auth.middleware.AuthenticationMiddleware',\n",
            "\t'django.contrib.messages.middleware.MessageMiddleware',\n",
            "\t'django.middleware.clickjacking.XFrameOptionsMiddleware',\n",
            "]\n",
            "\n",
            "\n",
            "ROOT_URLCONF = '"+self.project_name+".urls'\n",
            "\n",
            "TEMPLATES = [\n",
            "\t{\n",
            "\t\t'BACKEND': 'django.template.backends.django.DjangoTemplates',\n",
            "\t\t'DIRS': [os.path.join(BASE_DIR, 'Templates/layouts')],\n",
            "\t\t'APP_DIRS': True,\n",
            "\t\t'OPTIONS': {\n",
            "\t\t\t'context_processors': [\n",
            "\t\t\t\t'django.template.context_processors.debug',\n",
            "\t\t\t\t'django.template.context_processors.request',\n",
            "\t\t\t\t'django.contrib.auth.context_processors.auth',\n",
            "\t\t\t\t'django.contrib.messages.context_processors.messages',\n",
            "\t\t\t],\n",
            "\t\t},\n",
            "\t},\n", 
            "]\n",
            "\n",
            "\n",
            "WSGI_APPLICATION = '"+self.project_name+".wsgi.application'\n",
            "\n",
            "\n"
        ]
        
        
        if self.app['databaseType'] == 'PostgreSQL':
            a.extend([
                "# Database\n",
                "# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n",
                "\n",
                "DATABASES = {\n",
                "\t'default': {\n",
                "\t\t'ENGINE': 'django.db.backends.postgresql',\n",
                "\t\t'NAME': '"+self.project_name+"_django',\n",
                "\t\t'USER':'<your User>',\n",
                "\t\t'PASSWORD':'<your Password>',\n",
                "\t\t'HOST':'localhost'\n",
                "\t}\n",
                "}\n",
                "\n",
            ])
        elif self.app['databaseType'] == 'MySQL':
            a.extend([
                "# Database\n",
                "# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n",
                "\n",
                "DATABASES = {\n",
                "\t'default': {\n",
                "\t\t'ENGINE': 'django.db.backends.mysql',\n",
                "\t\t'NAME': '"+self.project_name+"_django',\n",
                "\t\t'USER':'<your User>',\n",
                "\t\t'PASSWORD':'<your Password>',\n",
                "\t\t'HOST':'localhost'\n",
                "\t}\n",
                "}\n",
                "\n",
            ])
            pass
        elif self.app['databaseType'] == 'Sqlite':
            a.extend([
                "# Database\n",
                "# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n",
                "\n",
                "DATABASES = {\n",
                "\t'default': {\n",
                "\t\t'ENGINE': 'django.db.backends.sqlite3',\n",
                "\t\t'NAME': '"+self.project_name+"_django',\n",
                "\t\t'USER':'<your User>',\n",
                "\t\t'PASSWORD':'<your Password>',\n",
                "\t\t'HOST':'localhost'\n",
                "\t}\n",
                "}\n",
                "\n",
            ])
        elif self.app['databaseType'] == 'Oracle':
            a.extend([
                "# Database\n",
                "# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n",
                "\n",
                "DATABASES = {\n",
                "\t'default': {\n",
                "\t\t'ENGINE': 'django.db.backends.oracle',\n",
                "\t\t'NAME': '"+self.project_name+"_django',\n",
                "\t\t'USER':'<your User>',\n",
                "\t\t'PASSWORD':'<your Password>',\n",
                "\t\t'HOST':'localhost'\n",
                "\t}\n",
                "}\n",
                "\n",
            ])    
        elif self.app['databaseType'] == 'MicrosoftSQL':
            a.extend([
                "# Database\n",
                "# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n",
                "# Maybe you have to run this command 'pip install django-pyodbc-azure'\n",
                "\n",
                "DATABASES = {\n",
                "\t'default': {\n",
                "\t\t'ENGINE': 'sql_server.pyodbc',\n",
                "\t\t'NAME': '"+self.project_name+"_django',\n",
                "\t\t'USER':'<your User>',\n",
                "\t\t'PASSWORD':'<your Password>',\n",
                "\t\t'HOST':'localhost'\n",
                "\t}\n",
                "}\n",
                "\n",
            ])
        else:
            a.extend([
                "# Database\n",
                "# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n",
                "\n",
                "DATABASES = {\n",
                "\t'default': {\n",
                "\t\t'ENGINE': 'django.db.backends.<your Database>',\n",
                "\t\t'NAME': '"+self.project_name+"_django',\n",
                "\t\t'USER':'<your User>',\n",
                "\t\t'PASSWORD':'<your Password>',\n",
                "\t\t'HOST':'localhost'\n",
                "\t}\n",
                "}\n",
                "\n",
            ])
        
            pass
        
        """
        '''
        ###################################################
        'django.db.backends.postgresql'
        'django.db.backends.mysql'
        'django.db.backends.sqlite3'
        'django.db.backends.oracle'
        You can use a database backend that doesnâ€™t ship with Django by setting ENGINE to a fully-qualified path (i.e. mypackage.backends.whatever).
        ###################################################
        '''
        """
        
        a.extend([
            "\n",            
            "# Password validation\n",
            "# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n",
            "AUTH_PASSWORD_VALIDATORS = [\n",
            "\t{\n",
            "\t\t'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n",
            "\t},\n",
            "\t{\n",
            "\t\t'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n",
            "\t},\n",
            "\t{\n",
            "\t\t'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n",
            "\t},\n",
            "\t{\n",
            "\t\t'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n",
            "\t},\n",
            "]\n",
            "\n",
            "\n",
            "# Internationalization\n",
            "# https://docs.djangoproject.com/en/3.0/topics/i18n/\n",
            "\n",
            "LANGUAGE_CODE = 'en-us'\n",
            "\n",
            "TIME_ZONE = 'UTC'\n",
            "\n",
            "USE_I18N = True\n",
            "\n",
            "USE_L10N = True\n",
            "\n",
            "USE_TZ = True\n",
            "\n",
            "\n",
            "# Static files (CSS, JavaScript, Images)\n",
            "# https://docs.djangoproject.com/en/3.0/howto/static-files/\n",
            "\n",
            "STATIC_URL = '/static/'\n",
        ])
        self.doc = a
    
    def __set_file(self,path):
        '''
        if not p.exists(path):
            template_file = open(path,"w")
        else:
            template_file = open(path,"a")
            pass
        '''
        return open(path,"w")
        pass
    
    def create(self, path="./result", default_fields=False):
        
        if not p.exists(path) :
            makedirs(path,0o777)
        
        path= path+"/settings.py"
            
        model_file = self.__set_file(path)
        
        model_file.writelines(self.doc)
        pass
    pass

class Settings(object):
    def __init__(self,app, project_name,out_path):
        try:
            self.project_name = project_name
            self.app = app
            print("Cooking settings.py file...")
            
            model_ =  settings_generator(self.app,self.project_name)
            model_.create(path= out_path+project_name+"/"+project_name,default_fields=True)
            pass
        except Exception as e:
            print("Settings:\n")
            print(e)
            pass
        
        
    pass


if __name__ == "__main__":
    
    app= {
        "name": "EjemploAlv",
        "description": ":v",
        "databaseType": "Sqlite",
        "tables": [
                    {
                        "name": "Persona",
                        "fields": [
                            {
                                "name": "Nombre",
                                "type": "String",
                                "required": "True",
                                "unique":"True" #comentar a samy de agregar este campo
                            },
                            {
                                "name": "Edad",
                                "type": "Integer",
                                "required": "True",
                                "unique":"False" #comentar a samy de agregar este campo
                                
                            }
                        ]
                    },
                    {
                        "name": "Mascota",
                        "fields": [
                            {
                                "name": "Nombre",
                                "type": "String",
                                "required": "True"
                            },
                            {
                                "name": "Propietario",
                                "type": "Persona",
                                "required": "False"
                            }
                        ]
                    }
                ]
            }
    
    s=Settings(app,"project_test")